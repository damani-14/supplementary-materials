x = 7
y = 22
x^2 + y^2
z = x^2 + y^2
sqrt(z)
log(y)
log2(y)
abs(-24)
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("gWidgets")
x1 = c(1,3,5,7,9)
gender = c("male","female")
2:7
seq(from=1, to=7, by=0.25)
rep(1, times=10)
seq(from=1, to=7, by=2)
rep(seq(from=2, to=5, by=0.25), times=5)
rep(c("m", "f"), times=5)
x = 1:5
y = c(1,3,5,7,9)
x+10
x-10
x*10
x/2
data1 <- read.csv(file.choose(), header=T)
data1
data2 <-read.table(file.choose(), header=T, sep=",")
?write.table
data2 <- read.table(file.choose(), header=T, sep=",")
data2 <- read.table(file.choose(), header=T, sep=",")
data2 <- read.table(file.choose(), header=T, sep=",")
data2 <- read.table(file.choose(), header=T, sep="\t")
pwd
rm(all)
rm(data1,data2,gender,x,x1,y,z)
get(wd)
getwd()
setwd(~/Documents/Supplementary_Materials/R)
setwd(/Documents/Supplementary_Materials/R)
setwd(~Documents/Supplementary_Materials/R)
setwd("~/Documents/Supplementary_Materials/R")
getwd()
ls()
y = matrix(1:6, 2, 3)
y
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
y
for(i in seq_len(nrow(y))) {
for(j in seq_len(ncol(y))) {
print(y[i, j])
}
}
for(i in seq_len(ncol(y))) {
for(j in seq_len(nrow(y))) {
print(y[i, j])
}
}
z = 5
while(z >= 3 && z <= 10) {
print(z)
coin = rbinom(1, 1, 0.5)
if(coin == 1) { ##random walk
z = z + 1
} else {
z = z - 1
}
}
plot(z)
?break
rm(y,coin,i,j,z)
getwd()
getwd()
setwd("/Users/DamanisMacBook/Documents/Supplementary_Materials/ISLR/Labs/Lab01)
")
setwd("/Users/DamanisMacBook/Documents/Supplementary_Materials/ISLR/Labs/Lab01")
getwd()
college = read.csv("College.csv")
rownames(college)=college[,1]
fix(rownames)
fix(college)
?rownames
?fix
# although R will not try to do calculations on the 1st column now that it's set to row.names, we should still get
# rid of it
college=college[,-1]
fix(college)
summary(college)
#
pairs(college)
#
pairs(college[,1:10])
plot(college$Outstate,college$private)
plot(college$Outstate,college$Private)
fix(college)
#
attach(college)
outstate=as.factor(Outstate)
plot(outstate,Private)
plot(Private,outstate)
private=as.factor(Private)
plot(Private,outstate)
rm(outstate)
plot(Private,outstate)
plot(Private,Outstate)
# use the plot function to produce side-by-side boxplots of Outstate vs Private
plot(college$Outstate,college$Private)
plot(Private,Outstate)
plot(Private,Outstate,xlab="Private Institution",ylab="Out-of-State Tuition")
plot(Private,Outstate,xlab="Private Institution",ylab="Tuition",title="Out-of-State Tuition Cost vs Private Designation")
Elite=rep("No",nrow(college))
Elite[college$Top10perc >50]="Yes"
Elite=as.factor(ELite)
college=data.frame(college,Elite)
Elite=rep("No",nrow(college))
Elite[college$Top10perc >50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
summary(college)
rm(college,Elite,private,rownames)
college = read.csv("College.csv")
# rownames() retrieves or sets the row or column names of a matrix-like object
# in this case, we have set the first column to be the row names
# now, each row is associated with a specific university
rownames(college)=college[,1]
# fix() will open an editor window with the data in table form. The data set can be editied in this window and saved.
fix(college)
# although R will not try to do calculations on the 1st column now that it's set to row.names, we should still get
# rid of it
college=college[,-1]
fix(college)
attach(college)
# summarizing the data
summary(college)
# produce a SCATTERPLOT MATRIX of the first 10 columns using the pairs() function
pairs(college[,1:10])
# use the plot function to produce side-by-side boxplots of Outstate vs Private
# when plotting quantitative data (y) vs qualitative (x), as factor can be used to properly plot your
# qualitative data (in this case, x = Private: Yes or No)
private=as.factor(Private)
plot(Private,Outstate,xlab="Private Institution",ylab="Tuition")
# create a new qualitative variable, called "Elite", by binning the Top10perc variable.
### we are going to divide universities into two groups based on whether or not the
###proportion of students coming from the top 10% of their high school
### calsses exceeds 50%
Elite=rep("No",nrow(college))
Elite[college$Top10perc >50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
summary(college)
?rep
?nrow
?data.frame
?type
typeof(Elite)
Elite
par(mfrow=c(2,2))
# use the hist() function to produce some histograms with differing numbers of bins
# for a few of the quantitative variables.
# use par(mfrow=c(2,2)) to divide the figure window into 4 panels.
fix(college)
hist(S.F.Ratio, breaks=25)
hist(Top20perc, breaks=20)
hist(Top25perc, breaks=20)
hist(Enroll, 30)
hist(Accept, 25)
auto = read.csv("Auto.csv")
auto = read.table("Auto.data",header=T,na.strings="?")
fix(auto)
auto = read.table("auto.data",header=T,na.strings="?")
fix(auto)
auto=read.table("auto.data")
auto=read.table("Auto.data")
rm(auto)
auto = read.table("Auto.data",header=TRUE,na.strings="?")
fix(auto)
rm(auto)
auto = read.table("Auto.data",header=TRUE,na.strings="?")
fix(auto)
dim(auto)
auto=na.omit(auto)
dim(auto)
sumary(auto)
summary(auto)
fix(auto)
range(auto.mpg)
attach(auto)
range(mpg)
range(cylinders)
range(displacement)
range(horsepower)
range(weight)
range(acceleration)
?sd
sd(mpg)
sd(cylinders)
sd(displacement)
sd(horsepower)
sd(weight)
sd(acceleration)
auto[10:85,,drop=FALSE]
subset = auto[10:85,,drop=FALSE]
rm(subset)
subset = auto([1:10,,drop=FALSE]+[86:392,,drop=FALSE])
subset = auto[1:10,,drop=FALSE + 86:392,,drop=FALSE]
subset = auto[1:10,drop=FALSE]
subset = auto[1:10,,drop=FALSE]
subset2 = auto[86:392,,drop=FALSE]
autosub= subset + subset1
autosub= subset + subset2
rm(subset,subset2)
auto_sub = c(auto[1:10,,drop=FALSE],auto[86:392,,drop=FALSE])
fix(auto_sub)
View(auto_sub)
rm(auto_sub)
?drop
asub1=auto[1:10,,drop=F]
asub2=auto[86:392,,drop=F]
?c
?rbind
subset=rbind(asub1,asub2)
rm(asub1,asub2)
fix(subset)
rm(subset)
asub1=auto[1:9,,drop=F]
asub2=auto[86:392,,drop=F]
subset=rbind(asub1,asub2)
rm(asub1,asub2)
fix(subset)
rm(college,Elite,private)
range(year)
# [1] 2.758864
sd(years)
# [1] 2.758864
sd(year)
sapply(auto[,1:7], range)
sapply(auto[,1:7], mean)
sapply(auto[,1:7], sd)
print("Hello")
print("Range")
sapply(auto[,1:7], range)
print("Mean")
sapply(auto[,1:7], mean)
print("Standard Deviation")
sapply(auto[,1:7], sd)
pairs(auto[,1:7])
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Boston
?Boston
boston = Boston
attach(boston)
rm(auto,subset)
# (B) -
pairs(boston)
x = boston[,crim]
y = boston[,2:14]
plot(x,y)
fix(boston)
x = boston[,1]
y = boston[,2:14]
plot(x,y)
rm(x)
rm(y)
par(mfrow=c(4,4))
plot(crim,zn,ylab="zn")
plot(crim,indus,ylab="industry")
plot(crim,chas,ylab="chas")
plot(crim,nox,ylab="Nitro")
plot(crim,rm,ylab="Rooms")
plot(crim,age,ylab="Age")
plot(crim,dis,ylab="Dist. Emp")
plot(crim,rad,ylab="Hwy. Radius")
plot(crim,tax,ylab="Tax Rate")
plot(crim,ptratio,ylab="Prop. Tax")
plot(crim,black,ylab="Black")
plot(crim,lstat,ylab="L. Status")
plot(crim,medv,ylab="Med. Home Val.")
# (D) - There appears to be fewer suburbs with high crime rates than areas closer to employment centers
range(dis)
# [1]  1.1296 12.1265
# There is a significant spike in the crime rate for areas taxed between $600:700 per $10,000
range(tax)
# [1] 187 711
# There is a strong correlation between higher pupil to teacher ratio and increased crime rate
range(ptratio)
nearRiver=boston(chas == 1)
nearRiver=boston[chas == 1]
nearRiver[boston$chas == 1]
nearRiver= boston[boston$chas == 1]
fix(boston)
nearRiver= boston[4 == 1]
nearRiver= boston[4 > 0]
nearRiver= boston[4 > 0] = "Yes"
nearRiver
rm(nearRiver)
nearRiver= boston[boston$chas > 0]
nearRiver= boston[boston$4 > 0]
nearRiver= boston[boston$chas >= 1]
nearRiver= boston[chas >= 1]
nearRiver= boston[4 >= 1]
fix(boston)
boston=Boston
rm(nearRiver)
nearRiver= boston[boston$chas > 0]
nearRiver= boston[boston[,4] > 0]
nearRiver= boston[,4 > 0]
fix(boston)
range(chas)
nearRiver= boston[chas > 0]
nearRiver= boston[boston$chas > 0]
nearRiver= [boston$chas > 0]
nearRiver= boston$chas > 0
range(nearRiver)
rm(nearRiver)
nearRiver = c(boston[boston$chas > 0],drop=FALSE)
nearRiver = c(boston$chas > 0,drop=FALSE)
nearRiver = c(boston$chas = 1,drop=FALSE)
nearRiver = c(boston$chas == 1,drop=FALSE)
fix(nearRiver)
nearRiver = c(boston$chas == 1,drop=T)
fix(nearRiver)
rm(nearRiver)
fix(boston)
nearRiver = subset(boston, chas == 1)
dim(nearRiver)
summary(ptratio)
# (G) - Which suburb of Boston has the lowest median value of owner-occcupied homes?
# What are the values of the other predictors for that suburb, and how do those values compare to the
# overall ranges for those predictors? Comment on your findings.
plot(medv)
# (G) - Which suburb of Boston has the lowest median value of owner-occcupied homes?
# What are the values of the other predictors for that suburb, and how do those values compare to the
# overall ranges for those predictors? Comment on your findings.
par(mfrow=[1,1])
# (G) - Which suburb of Boston has the lowest median value of owner-occcupied homes?
# What are the values of the other predictors for that suburb, and how do those values compare to the
# overall ranges for those predictors? Comment on your findings.
par(mfrow=c(1,1))
plot(medv)
?min
identify(min(medv),name)
identify(min(medv))
min(medv)
identify(medv)
print(boston[399,406])
hist(medv)
print(medv < 10)
range(medv)
lowest = subset(boston, medv < 10)
fix(lowest)
t(subset(boston,medv == min(boston$medv)))
?t
lowest = subset(boston, medv == min(medv))
lowest
print(lowest)
t(lowest)
rm7=subset(boston,rm > 7)
rm8=subset(boston,rm >8)
t(rm7)
t(rm8)
rm7
rm8
summary(rm7)
pairs(rm7)
rm7a=rm7[,-8]
pairs(rm7a)
rm(rm7a)
loMedv=lowest
rm(lowest)
