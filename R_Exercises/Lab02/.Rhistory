(sqrt(length(x-1)*sum(x*y)) / (sqrt(sum(x*x) * (sum(y*y)-(sum(x*y))^2))
)
)
(sqrt(length(x)-1 * sum(x*y))) / (sqrt(sum(x*x) * sum(y*y) - (sum(x*y))^2))
(sqrt(length(x)-1 * sum(x*y)) / (sqrt(sum(x*x) * sum(y*y) - (sum(x*y))^2))
(sqrt(length(x)-1 * sum(x*y)) / (sqrt(sum(x*x) * sum(y*y) - ((sum(x*y))*(sum(x*y))
(sqrt(length(x)-1 * sum(x*y)) / (sqrt(sum(x*x) * sum(y*y) - ((sum(x*y))*(sum(x*y)))
)
))
)
)))))
(sqrt(length(x)-1 * sum(x*y)) / (sqrt(sum(x*x) * sum(y*y) - ((sum(x*y))*(sum(x*y))
q
(sqrt(length(x)-1) * sum(x*y)) / (sqrt(sum(x*x) * sum(y*y) - (sum(x*y))*(sum(x*y))))
summary(x,y)
summary(noINTyx)
summary(noINTxy)
yesINTyx=lm(y~x)
summary(yesINTyx)
yesINTxy=lm(x~y)
summary(yesINTxy)
mean(y)
sum((y-mean(y))^2)
sum((x-mean(x))^2)
y2 = x
yesINTy2x=lm(y2~x)
summary(yesINTy2x)
yesINTxy2=lm(x~y2)
summary(yesINTxy2)
# B
y2 = x
yesINTyx=lm(y~x)
summary(yesINTyx)
yesINTxy=lm(x~y)
summary(yesINTxy)
par(mfrow=c(1,1))
plot(x,y2)
plot(y2,x)
rm(yesINTy2x, yesINTxy2)
set.seed(1)
x2 = rnorm(100)
y2 = -sample(x2, 100)
# Check
sum(x2^2)
sum(y2^2)
yesINTyx2=lm(y2~x2)
summary(yesINTyx2)
yesINTxy2=lm(x2~y2)
summary(yesINTxy2)
plot(x2,y2)
plot(y2,x2)
?rnorm
set.seed(1)
print(rnorm(10))
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
eps = rnorm(100, mean=0, sd = 0.25)
y = -1 + 0.5*x
length(y)
plot(x,y)
ex13e = lm(y~x)
summary(ex13e)
abline
?abline
par(mfrow=c(1,1))
plot(x,y)
pop = abline(x,y,lwd=2,col="red")
mod = abline(ex13e,lwd=2,col="blue")
pop = abline(min(x),max(x),lwd=2,col="red")
pop = abline(min(x,y),max(x,y),lwd=2,col="red")
mod = abline(ex13e,lwd=2,col="blue")
# The linear model has parameters B0 = -1 and B1 = 0.5
# These prediction coefficients are identical to those observed in the the actual data
par(mfrow=c(1,1))
plot(x,y)
pop = abline(min(x,y),max(x,y),lwd=2,col="red")
plot(x,eps)
ex13e = lm(eps~x)
summary(ex13e)
# The linear model has parameters B0 = -1 and B1 = 0.5
# These prediction coefficients are identical to those observed in the the actual data
par(mfrow=c(1,1))
mod = abline(ex13e,lwd=2,col="blue")
pop = abline(y=2,col="red")
pop = abline(y,lwd=2,col="red")
pop = abline(x,eps,lwd=2,col="red")
mod = abline(ex13e,lwd=2,col="blue")
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
eps = rnorm(100, mean=0, sd = 0.25)
y = -1 + 0.5*x
# The length of Y is: 100
# The intercept (B0) is -1 and the slope (B1) is 0.5
plot(y)
plot(x,eps)
# The length of Y is: 100
# The intercept (B0) is -1 and the slope (B1) is 0.5
plot(x,y)
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
eps = rnorm(100, mean=0, sd = 0.25)
y = -1 + 0.5*x
# The length of Y is: 100
# The intercept (B0) is -1 and the slope (B1) is 0.5
plot(x,y)
ex13e = lm(eps~x)
summary(ex13e)
ex13e = lm(y~x)
summary(ex13e)
# The length of Y is: 100
# The intercept (B0) is -1 and the slope (B1) is 0.5
plot(x,y)
y = -1 + 0.5*x + eps
length(y)
# The length of Y is: 100
# The intercept (B0) is -1 and the slope (B1) is 0.5
plot(x,y)
ex13e = lm(y~x)
summary(ex13e)
par(mfrow=c(1,1))
pop = abline(y,lwd=2,col="red")
mod = abline(ex13e,lwd=2,col="blue")
pop = abline(x,y,lwd=2,col="red")
plot(x,y)
?legend
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col="red")
mod = abline(ex13e, lwd=2,col="blue")
legend(1,-1, legend=c("Population", "Model Fit"),col="red":"blue",lwd=2)
pop = abline(-1, 0.5, lwd=2,col=4)
pop = abline(-1, 0.5, lwd=2,col=7)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13e, lwd=2,col=3)
mod = abline(ex13e, lwd=2,col=2)
pop = abline(-1, 0.5, lwd=2,col=3)
pop = abline(-1, 0.5, lwd=2,col=1)
pop = abline(-1, 0.5, lwd=2,col=10)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13e, lwd=2,col=2)
legend(1,-1, legend=c("Population", "Model Fit"),col=4:2,lwd=2)
legend(-2,0, legend=c("Population", "Model Fit"),col=4:2,lwd=2)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13e, lwd=2,col=2)
legend(-2,0, legend=c("Population", "Model Fit"),col=4:2,lwd=2)
pop = abline(-1, 0.5, lwd=2,col=4)
pop = abline(-1, 0.5, lwd=2,col=4)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13e, lwd=2,col=2)
mod = abline(ex13e, lwd=2,col=3)
legend(-2,0, legend=c("Population", "Model Fit"),col=4:3,lwd=2)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13e, lwd=2,col=3)
legend(-2,0, legend=c("Population", "Model Fit"),col=4:3,lwd=2)
# Now fit a polynomial regression model that predicts y using x and x^2
ex13g = lm(y,poly(x,2))
# Now fit a polynomial regression model that predicts y using x and x^2
ex13g = lm(y~poly(x,2))
summary(ex13e)
summary(ex13g)
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsH = rnorm(100, mean=0, sd = 0.05)
y = -1 + 0.5*x + epsH
ex13h = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13h, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsI = rnorm(100, mean=0, sd = 0.75)
y = -1 + 0.5*x + epsI
ex13I = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13I, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsH = rnorm(100, mean=0, sd = 0.05)
y = -1 + 0.5*x + epsH
ex13h = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13h, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
print('Population')
summary(y)
print('Model')
summary(ex13h)
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsI = rnorm(100, mean=0, sd = 0.75)
y = -1 + 0.5*x + epsI
ex13i = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13i, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
print('Population')
summary(y)
print('Model')
summary(ex13i)
par(mfrow=c(2,1))
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsH = rnorm(100, mean=0, sd = 0.05)
y = -1 + 0.5*x + epsH
ex13h = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13h, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
print('Population')
summary(y)
print('Model')
summary(ex13h)
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsI = rnorm(100, mean=0, sd = 0.75)
y = -1 + 0.5*x + epsI
ex13i = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13i, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
print('Population')
summary(y)
print('Model')
summary(ex13i)
# H
# Repeat A-F but modify the data generation process in a way that
# there is LESS noise (NOTE: This can be accomplished by reducing
# the variance of the normal distribution used to create the error
# term 'eps')
par(mfrow=c(2,1))
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsH = rnorm(100, mean=0, sd = 0.05)
y = -1 + 0.5*x + epsH
ex13h = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13h, lwd=2,col=3)
legend(-2,0, legend=c("H-Population", "H-Model Fit"),col=4:3,lwd=2)
print('Population')
summary(y)
print('Model')
summary(ex13h)
# I
# Repeat A-F but modify the data generation process in a way that
# there is MORE noise
set.seed(1)
x = rnorm(100, mean=0, sd = 1)
epsI = rnorm(100, mean=0, sd = 0.75)
y = -1 + 0.5*x + epsI
ex13i = lm(y~x)
plot(x,y)
pop = abline(-1, 0.5, lwd=2,col=4)
mod = abline(ex13i, lwd=2,col=3)
legend(-2,0, legend=c("I-Population", "I-Model Fit"),col=4:3,lwd=2)
print('Population')
summary(y)
print('Model')
summary(ex13i)
?confint
rm(ex13I)
# Standard Model
confint(ex13e)
# High Noise Model
confint(ex13h)
# Low Noise Model
confint(ex13i)
0.553-0.446
0.511-0.489
0.659-0.338
?runif
plot(x1,x2)
set.seed(1)
x1 = runif(100)
x2 = 0.5 * x1 + rnorm(100)/10
y = 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2)
par(mfrow=c(1,1))
set.seed(1)
x1 = runif(100)
x2 = 0.5 * x1 + rnorm(100)/10
y = 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2)
?cor
# B
cor(x1,x2)
plot(x2,x1)
# C
xmodel = lm(y~x2,x1)
# C
xmodel = lm(y~x2+x1)
length(x1)
length(x2)
length(y)
length(xmodel)
summary(xmodel)
# C
xmodel = lm(y~x1*x2)
summary(xmodel)
# C
xmodel = lm(y~x1~x2)
# C
xmodel = lm(x2~x1)
summary(xmodel)
# C
xmodel = lm(y~x2*x1)
summary(xmodel)
# C
xmodel = lm(y~x2+x1)
summary(xmodel)
rm(xmodel)
# C
xmodel = lm(y~x2+x1)
summary(xmodel)
plot(x1,xmodel(x1))
plot(xmodel.fit(x1))
plot(y)
# D
x1model=lm(y~x1)
summary(x1model)
x2model=lm(y~x2)
summary(x2model)
x1=c(x1, 0.1)
x2=c(x2, 0.8)
y=c(y, 6)
xmodel = lm(y~x2+x1)
x1model=lm(y~x1)
x2model=lm(y~x2)
summary(xmodel)
summary(x1model)
summary(x2model)
plot(xmodel)
plot(x1model)
length(x1)
plot(x2model)
plot(xmodel)
plot(x2,x1)
plot(x1,x2)
xmodel = lm(y~x1+x2)
summary(xmodel)
# A
library(MASS)
Boston=Boston
attach(Boston)
fix(Boston)
attach(Boston)
rm(Boston)
Boston=Boston
rm(x1model,x2model,xmodel)
rm(x1,x2,y)
# A
names(Boston)
znMOD = lm(crim~zn,data=Boston)
summary(znMOD)
print(znMOD$coefficients)
?znMOD
?znMOD$
4
print(znMOD)
print(znMOD$effects)
print(znMOD$fitted.values)
print(znMOD$model)
print(znMOD$coefficients)
summary.lm(znMOD)$coefficients
k = summary.lm(znMOD)$coefficients
dim(k)
print(k[2,4])
MODS = (znMOD, indusMOD, chasMOD)
MODS = ('znMOD', 'indusMOD', 'chasMOD')
MODS = ['znMOD', 'indusMOD', 'chasMOD']
MODS = 'znMOD', 'indusMOD', 'chasMOD'
MODS = c('znMOD', 'indusMOD', 'chasMOD')
MODS = c(znMOD, indusMOD, chasMOD)
znMOD = lm(crim~zn,data=Boston)
indusMOD = lm(crim~indus,data=Boston)
chasMOD = lm(crim~chas,data=Boston)
noxMOD = lm(crim~nox,data=Boston)
rmMOD = lm(crim~rm,data=Boston)
ageMOD = lm(crim~age,data=Boston)
disMOD = lm(crim~dis,data=Boston)
radMOD = lm(crim~rad,data=Boston)
taxMOD = lm(crim~tax,data=Boston)
ptratioMOD = lm(crim~ptratio,data=Boston)
blackMOD = lm(crim~black,data=Boston)
lstatMOD = lm(crim~lstat,data=Boston)
medvMOD = lm(crim~medv,data=Boston)
rm(k)
MODS(1)
MODS[1]
rm(MODS)
summary.lm(znMOD)$coefficients
summary.lm(znMOD)$coefficients[2,4]
summary.lm(znMOD)$coefficients[2,4]; print(znMOD)
summary.lm(znMOD)$coefficients[2,4]; print('znMOD')
summary.lm(znMOD)$coefficients[2,4], print('znMOD')
summary.lm(znMOD)$coefficients[2,4]: print('znMOD')
print('znMOD'); summary.lm(znMOD)$coefficients[2,4]
print('indusMOD'); summary.lm(indusMOD)$coefficients[2,4]
print('chasMOD'); summary.lm(chasMOD)$coefficients[2,4]
print('noxMOD'); summary.lm(noxMOD)$coefficients[2,4]
print('rmMOD'); summary.lm(rmMOD)$coefficients[2,4]
print('ageMOD'); summary.lm(ageMOD)$coefficients[2,4]
print('disMOD'); summary.lm(disMOD)$coefficients[2,4]
print('radMOD'); summary.lm(radMOD)$coefficients[2,4]
print('taxMOD'); summary.lm(taxMOD)$coefficients[2,4]
print('ptratioMOD'); summary.lm(ptratioMOD)$coefficients[2,4]
print('blackMOD'); summary.lm(blackMOD)$coefficients[2,4]
print('lstatMOD'); summary.lm(lstatMOD)$coefficients[2,4]
print('medvMOD'); summary.lm(medvMOD)$coefficients[2,4]
names(Boston)
plot(crim~rad,pch=2)
summary(rad)
hist(rad)
plot(crim~tax,pch=3)
plot(crim~tax)
plot(crim~lstat,pch=3)
hist(tax)
hist(dis)
hist(age)
hist(indus)
par(mfrow=c(3,2))
plot(crim~age,title="Age")
abline(ageMOD,lwd=2,col=32)
plot(crim~black,pch=3,title="Black")
abline(blackMOD,lwd=2,col=257)
plot(crim~dis,pch=3,title="Distance")
abline(distanceMOD,lwd=2,col=84)
plot(crim~lstat,pch=3,title="Lstat")
abline(lstatMOD,lwd=2,col=73)
plot(crim~medv,pch=3,title="Medv")
abline(medvMOD,lwd=2,col=450)
abline(ageMOD,lwd=2,col=3)
par(mfrow=c(3,2))
plot(crim~age,title="Age")
abline(ageMOD,lwd=2,col=3)
plot(crim~black,pch=3,title="Black")
abline(blackMOD,lwd=2,col=3)
plot(crim~dis,pch=3,title="Distance")
abline(distanceMOD,lwd=2,col=3)
plot(crim~lstat,pch=3,title="Lstat")
abline(lstatMOD,lwd=2,col=3)
plot(crim~medv,pch=3,title="Medv")
abline(medvMOD,lwd=2,col=3)
par(mfrow=c(3,2))
plot(crim~age)
abline(ageMOD,lwd=2,col=3)
plot(crim~black)
abline(blackMOD,lwd=2,col=3)
plot(crim~dis)
abline(distanceMOD,lwd=2,col=3)
plot(crim~lstat)
abline(lstatMOD,lwd=2,col=3)
plot(crim~medv)
abline(medvMOD,lwd=2,col=3)
par(mfrow=c(3,2))
plot(crim~age)
abline(ageMOD,lwd=2,col=3)
plot(crim~black)
abline(blackMOD,lwd=2,col=3)
plot(crim~dis)
abline(disMOD,lwd=2,col=3)
plot(crim~lstat)
abline(lstatMOD,lwd=2,col=3)
plot(crim~medv)
abline(medvMOD,lwd=2,col=3)
fullMOD = lm(crim~.subset(Boston, -crim),data=Boston)
fullMOD = lm(crim~subset(Boston, -crim),data=Boston)
fullMOD = lm(crim~subset(Boston,select = -crim),data=Boston)
fullMOD = lm(crim~.subset(Boston,select = -crim),data=Boston)
fullMOD = lm(crim~.,subset(Boston,select = -crim),data=Boston)
fullMOD = lm(crim~,data=Boston)
fullMOD = lm(crim~.,data=Boston)
summary(fullMOD)
x = summary.lm(znMOD)$coefficients[2,4]
x = c(x, summary.lm(indusMOD)$coefficients[2,4])
x = c(x, summary.lm(chasMOD)$coefficients[2,4])
x = c(x, summary.lm(noxMOD)$coefficients[2,4])
x = c(x, summary.lm(rmMOD)$coefficients[2,4])
x = c(x, summary.lm(ageMOD)$coefficients[2,4])
x = c(x, summary.lm(disMOD)$coefficients[2,4])
x = c(x, summary.lm(radMOD)$coefficients[2,4])
x = c(x, summary.lm(taxMOD)$coefficients[2,4])
x = c(x, summary.lm(ptratioMOD)$coefficients[2,4])
x = c(x, summary.lm(blackMOD)$coefficients[2,4])
x = c(x, summary.lm(lstatMOD)$coefficients[2,4])
x = c(x, summary.lm(medvMOD)$coefficients[2,4])
fullMOD[,1]
fullMOD[:,1]
print(fullMOD[,1])
y = summary.lm(fullMOD$coefficients[2:12,1])
y = summary.lm(fullMOD$coefficients[,1])
y = summary.lm(fullMOD)$coefficients[2:12,1]
y = summary.lm(fullMOD)$coefficients[,1]
y = summary.lm(fullMOD)$coefficients[2:13,1]
y = summary.lm(fullMOD)$coefficients[1:13,1]
print(y)
print(x)
y = summary.lm(fullMOD)$coefficients[2:14,1]
par(mfrow=c(1,1))
plot(x,y)
pairs(Boston)
par(mfrow=c(1,1))
plot(x,y)
plot(x,y)
